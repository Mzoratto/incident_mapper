generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Incident {
  id          String   @id @default(cuid())
  title       String
  description String   @default("")
  status      IncidentStatus @default(OPEN)
  severity    Severity @default(LOW)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  address     String?
  tags        String[]
  lat         Float?
  lng         Float?
  media       Media[]
  votes       Vote[]
  // geom: use migration SQL to add `GEOGRAPHY(Point,4326)` column named geom
}

model Media {
  id          String   @id @default(cuid())
  incidentId  String
  storageKey  String
  width       Int
  height      Int
  blurApplied Boolean  @default(false)
  createdAt   DateTime @default(now())
  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model Vote {
  id         String   @id @default(cuid())
  incidentId String
  userId     String
  kind       VoteKind
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
}

model DuplicateLink {
  id                 String   @id @default(cuid())
  srcIncidentId      String
  dstCanonicalIncidentId String
  reason             String
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String
  entity   String
  entityId String
  action   String
  diff     Json
  ts       DateTime @default(now())
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

enum VoteKind {
  up
  down
}

/// Track applied sync operations for idempotency
model AppliedOp {
  id String @id
  at DateTime @default(now())
}
